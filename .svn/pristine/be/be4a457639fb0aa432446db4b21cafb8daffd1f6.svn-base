sap.ui.controller('ereportanalyticsnew.report-assignment.ti', {

	/**
	 * @author I071053
	 */
	// isDebugMode : true,
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to modify the View before it is
	 * displayed, to bind event handlers and do other one-time initialization.
	 * 
	 * @memberOf ereportanalyticsnew.index
	 */
	// onInit : function() {
	// },
	/**
	 * /** The control collection register from view
	 * 
	 * @author I071053
	 */
	controls : {},
	/**
	 * @author I071053
	 */
	save : function() {
		var dataModel = this.controls['EditReportAssignment'].getModel().getData();
		var assignedOrgIds = [];
		var assignedOrgItems = this.controls['AssignedOrgList'].getItems();
		for ( var idx in assignedOrgItems) {
			var assignedOrgItem = assignedOrgItems[idx];
			assignedOrgIds.push(assignedOrgItem.getKey());
		}
		this.postDataToServer('report-assignment/save',
		// {
		// 'tgaDto' : dataModel,
		// tga : dataModel.tableGroupAssignment,
		// tgmId : dataModel.tableGroupModel.id,
		// assignedOrganizations : assignedOrgIds,
		// },
		dataModel, function(response) {
			console.log(response);
		});
	},

	/**
	 * @author I071053
	 */
	create : function(reportAssignmentId) {
		var _this = this;
		this.getDataFromServer('report-assignment/get-edit-model', null,
		// Bind data for whole current view
		function(sender, eventArgs) {
			_this.controls['EditReportAssignment'].setModel(eventArgs.dataModel);
			_this.controls['EditReportAssignment'].bindElement('/');
		});
	},
	/**
	 * @author I071053
	 */
	retrieve : function(reportAssignmentId) {
		var _this = this;
		this.getDataFromServer('report-assignment/retrieve', {
			'reportAssignmentId' : reportAssignmentId,
		},
		// Bind data for whole current view
		function(sender, eventArgs) {
			_this.controls['EditReportAssignment'].setModel(eventArgs.dataModel);
			_this.controls['EditReportAssignment'].bindElement('/');
		});
		// get assigned org list from server
		_this.getSelectedOrgList(reportAssignmentId, function(sender0, eventArgs0) {
			var lbxSelectedOrgList = _this.controls['AssignedOrgList'];
			lbxSelectedOrgList.destroyItems();
			var orgListData = eventArgs0.dataModel.getData();
			for (var idx = 0; idx < orgListData.length; idx++) {
				var orgData = orgListData[idx];
				var orgItem = new sap.ui.core.ListItem();
				orgItem.setKey(orgData.id);
				orgItem.setText(orgData.name);
				lbxSelectedOrgList.addItem(orgItem);
			}
		});
	},
	/**
	 * @author I071053
	 */
	getReportTemplateList : function(dataBinder, errorHandler) {
		this.getDataFromServer('getReportTemplateList', null, dataBinder, errorHandler);
	},
	/**
	 * @author I071053
	 */
	getAllOrgList : function(dataBinder, errorHandler) {
		this.getDataFromServer('getOrgnazitionList', null, dataBinder, errorHandler);
	},
	/**
	 * @author I071053
	 */
	getSelectedOrgList : function(reportAssignmentId, dataBinder, errorHandler) {
		this.getDataFromServer('report-assignment/get-assigned-org-list', {
			'reportAssignmentId' : reportAssignmentId
		}, dataBinder, errorHandler);
	},
	/**
	 * Request data to server
	 * 
	 * @author I071053
	 */
	postDataToServer : function(url, requestData, dataBinder, errorHandler) {
		var _this = this;
		jQuery.ajax({
			url : url + '.do',
			data : requestData,
			type : 'POST',
			contentType : 'application/xml',
			success : function(response) {
				var dataModel = new sap.ui.model.json.JSONModel();
				dataModel.setData(response);
				_this.getView().setModel(dataModel);
				if (dataBinder !== undefined && dataBinder !== null && typeof (dataBinder) === 'function') {
					dataBinder(_this, {
						'dataModel' : dataModel,
						'response' : response,
					});
				}
			},
			error : function(jqXHR, textStatus, errorThrown) {
				// Customized error handling
				if (dataBinder !== undefined && dataBinder !== null && typeof (dataBinder) === 'function') {
					errorHandler(jqXHR, textStatus, errorThrown);
				} else {
					// Default error handler
					sap.ui.commons.MessageBox.alert('Failed to get list: ' + textStatus + '\n' + errorThrown);
				}
			}
		});
	},
	/**
	 * Get data from server
	 * 
	 * @author I071053
	 */
	getDataFromServer : function(url, requestData, dataBinder, errorHandler) {
		var _this = this;
		jQuery.ajax({
			url : url + '.do',
			data : requestData,
			type : 'GET',
			contentType : 'application/xml',
			success : function(response) {
				var dataModel = new sap.ui.model.json.JSONModel();
				dataModel.setData(response);
				_this.getView().setModel(dataModel);
				if (dataBinder && typeof (dataBinder) === 'function') {
					dataBinder(_this, {
						'dataModel' : dataModel,
						'response' : response,
					});
				}
			},
			error : function(jqXHR, textStatus, errorThrown) {
				// Customized error handling
				if (errorHandler && typeof (errorHandler) === 'function') {
					errorHandler(jqXHR, textStatus, errorThrown);
				} else {
					// Default error handler
					sap.ui.commons.MessageBox.alert('Failed to get list: ' + textStatus + '\n' + errorThrown);
				}
			}
		});
	},
	/**
	 * @author I071053
	 */
	close : function() {
		var shell = sap.ui.getCore().getControl('myShell');
		shell.destroyContent();
		var owlEditReportAssignment = sap.ui.view({
			viewName : 'ereportanalyticsnew.report-assignment.owl',
			type : sap.ui.core.mvc.ViewType.JS
		});
		shell.setContent(owlEditReportAssignment, true);
	},
/*
 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered (NOT before the first rendering! onInit() is used
 * for that one!).
 * 
 * @memberOf ereportanalyticsnew.index
 */
// onBeforeRendering: function() {
//
// },
/**
 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here. This
 * hook is the same one that SAPUI5 controls get after being rendered.
 * 
 * @memberOf ereportanalyticsnew.index
 */
// onAfterRendering: function() {
//
// },
/**
 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
 * 
 * @memberOf ereportanalyticsnew.index
 */
// onExit: function() {
//
// }
});